// Define the URL of your backend API
const API_URL = "http://localhost:3000/api/accounts";

// Get the elements from the HTML document
const createAccountForm = document.getElementById("create-account-form");
const accountsList = document.getElementById("accounts-list");
const accountDetails = document.getElementById("account-details");

// Define a function to fetch all the accounts from the backend and display them in the accounts list
async function fetchAndDisplayAccounts() {
  try {
    // Try to fetch the accounts from the backend using the fetch API
    const response = await fetch(API_URL);
    // If the response is ok, parse it as JSON and loop through the accounts array
    if (response.ok) {
      const accounts = await response.json();
      console.log(accounts);

      const accountsString = accounts
        .map((acc) => {
          const { name, _id, balance } = acc;
          return `
        <li data-accid=${_id} class="account-card">
          <h3>Account name: ${name}</h3>
          <p>Account Id: ${_id}</p>
          <p>Balance: ${balance} kr</p>
        </li>`;
        })
        .join("");

      accountsList.innerHTML = accountsString;
    } else {
      // If the response is not ok, throw an error with the status text
      throw new Error(response.statusText);
    }
  } catch (error) {
    // If an error occurs, display it in an alert box
    alert(`Error fetching accounts: ${error}`);
  }
}
// Call the fetchAndDisplayAccounts function when the web page loads
fetchAndDisplayAccounts();



//newer version


// Define the URL of your backend API
const API_URL = "/api/accounts";

// Get the elements from the HTML document
const createAccountForm = document.getElementById("create-account-form");
const accountsList = document.getElementById("accounts-list");
const accountDetails = document.getElementById("account-details");
const accountCards = document.getElementsByClassName("account-card");
console.log(accountCards);

// Define a function to fetch all the accounts from the backend and display them in the accounts list
// async function fetchAndDisplayAccounts() {
//   try {
//     // Try to fetch the accounts from the backend using the fetch API
//     const response = await fetch(API_URL);
//     // If the response is ok, parse it as JSON and loop through the accounts array
//     if (response.ok) {
//       const accounts = await response.json();
//       console.log(accounts);

//       const accountsString = accounts
//         .map((acc) => {
//           const { name, _id, balance } = acc;
//           // Use forEach to iterate over the collection and add an event listener to each element
//           Array.from(accountCards).forEach((accountCard) => {
//             // Add an event listener to the element that will display the account details when clicked on
//             accountCard.addEventListener("click", () => {
//               displayAccountDetails(accountCard);
//             });
//           });
//           return `
//         <li data-accid=${_id} class="account-card">
//           <h3>Account name: ${name}</h3>
//           <p>Account Id: ${_id}</p>
//           <p>Balance: ${balance} kr</p>
//         </li>`;
//         })
//         .join("");

//       accountsList.innerHTML = accountsString;
//     } else {
//       // If the response is not ok, throw an error with the status text
//       throw new Error(response.statusText);
//     }
//   } catch (error) {
//     // If an error occurs, display it in an alert box
//     alert(`Error fetching accounts: ${error}`);
//   }
// }

async function fetchAndDisplayAccounts() {
  try {
    // Try to fetch the accounts from the backend using the fetch API
    const response = await fetch(API_URL);
    // If the response is ok, parse it as JSON and store it in a variable
    if (response.ok) {
      const accounts = await response.json();
      console.log(accounts);

      // Use map to create a new array of HTML strings for each account
      const accountsString = accounts
        .map((acc) => {
          const { name, _id, balance } = acc;
          return `
        <li data-accid=${_id} class="account-card">
          <h3>Account name: ${name}</h3>
          <p>Account Id: ${_id}</p>
          <p>Balance: ${balance} kr</p>
        </li>`;
        })
        .join("");

      // Update the accountsList innerHTML with the accountsString
      accountsList.innerHTML = accountsString;

      // Get the collection of elements with the class name "account-card"
      const accountCards = document.getElementsByClassName("account-card");

      // Use forEach to iterate over the collection and add an event listener to each element
      Array.from(accountCards).forEach((accountCard) => {
        // Add an event listener to the element that will display the account details when clicked on
        accountCard.addEventListener("click", () => {
          // Get the account id from the data-accid attribute
          const id = accountCard.dataset.accid;
          // Find the account object in the accounts array that matches the id
          const account = accounts.find((acc) => acc._id === id);
          // Call the displayAccountDetails function with the account object as an argument
          displayAccountDetails(account);
        });
      });
    } else {
      // If the response is not ok, throw an error with the status text
      throw new Error(response.statusText);
    }
  } catch (error) {
    // If an error occurs, display it in an alert box
    alert(`Error fetching accounts: ${error}`);
  }
}

// Define a function to display a single account details in the account details div
function displayAccountDetails(account) {
  // Clear the account details div before adding new elements
  accountDetails.innerHTML = "";
  // Create a heading element for the account details div
  const heading = document.createElement("h2");
  heading.textContent = "Account Details";
  // Append the heading element to the account details div
  accountDetails.appendChild(heading);
  // Create a paragraph element for the account name
  const name = document.createElement("p");
  name.textContent = `Name: ${account.name}`;
  // Create a paragraph element for the account balance
  const balance = document.createElement("p");
  balance.textContent = `Balance: ${account.balance}`;
  // Append the name and balance elements to the account details div
  accountDetails.appendChild(name);
  accountDetails.appendChild(balance);
}

// Call the fetchAndDisplayAccounts function when the web page loads
fetchAndDisplayAccounts();
